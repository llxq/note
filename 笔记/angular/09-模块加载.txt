-> 模块加载
    -> AngularJS 模块可以在被加载和执行之前对其自身进行配置，我们可以应用的加载阶段配置不同的逻辑

    -> 配置快
       -> 通过 config 方法实现对模块的配置，AngularJS 中的服务 大部分 都对应一个 'provider (提供者)'，用来执行对应服务相同的功能或对其进行配置

       -> 比如 $log、$http、$location 都是内置服务，相对应的 'provider' 分别是 $logProvider、$httpProvider、$locationProvider。

       -> 使用 config方法 对内置模块进行配置
          -> 对 $log 进行配置，每个内置的服务都有一个 Provider，允许一次性配置多个服务，传递的一个数组，(依赖的注入方式)
          -> App.config(['$logProvider', '$httpProvider', ('$logProvider', '$httpProvider') => {
              // $log有一个方法：$log.debug()，默认是开启的

              // 关闭 debug方法
              $logProvider.debugEnabled(false);
          }])
          // 这个时候 在使用 $log.debug方法就无效了

          -> 对 $filter 进行配置，内置的 $filter有九个内置的过滤器，可以通过配置新增过滤器
            -> App.config(['$filter', ($filter) => {
                // 新增 过滤器，使用 register方法进行注册    register：注册
                $filter.register('注册的名称', () => {
                    return (data) => {
                        // 对数据进行处理，再返回出去
                        return data
                    }
                })
            }])

        -> 两个可以合起来写
            -> App.config(['$filterProvider', '$logProvider', ($filterProvider, $logProvider) => {
                $logProvider.debugEnabled(false);
                $filterProvider.register('demoFilter', () => {
                    return (data) => {
                        return data + '新增的';
                    }
                })
             }])





    -> 运行块
        -> 服务也是模块形式存在的且对外提供特定功能，前面学习中的都是将服务作为依赖注入进去的，然后再调用，除了这种方式外我们也可以直接运行相应的服务模块，AngularJS 提供了 run方法 来实现

        -> 不但如此，run方法 还是最先执行的，利用这个特点我们可以将一些需要优化先执行的功能通过 run方法来运行，比如验证用户是否登录，未登录则不允许进行任何操作

        -> App.run(['$http', '$rootScope', ($http, $rootScope) => {
                $http({
                    url: '1.php',
                    method: 'get',
                    pramas: {
                        key: value
                    }
                }).then((data) => {
                    console.log(data);
                }).catch((err) => {
                    console.log(err);
                });
                $rootScope.name = '$scope的祖宗'    // 后面使用 $scope可以覆盖，这个就是 根作用域
            }]);

