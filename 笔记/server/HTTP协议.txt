-> HTTP协议
	-> URL概念
		-> URL：统一资源定位符
		-> URI：统一资源标识符
		-> URL和URI的区别
			-> 所有的URL都是URI,但URI不一定是URL
	-> 完整的URL
		-> 网络协议:IP地址(虚拟地址):端口号(80默认可以不写)/路径;参数?查询数据#锚点
		-> http://127.0.0.1:8080//11_SERVER;JSESSION=123456?key=value#mylink
-> 网络协议
	-> http://
	-> ftp://
	
-> 主机/端口号
	-> 严格来说,计算机中对外提供的服务程序可以绑定到任何一个空闲的端口上,从而实现监听
		客户端连接请求的任务。
	-> 常见协议指定了一些默认的端口号,应努力避免混用
		-> 看截图
		
-> 网络协议：客户端与服务器端之间的协议
	-> 主流协议
		-> http协议		https加密(openssl)协议
		-> socket协议	ws://		wss://  加密   多用于C/S架构
		-> ftp协议
	-> HTTP协议
		-> http协议：多用于B/S架构
		-> 一些问题：
			-> 短连接：
				-> 每次客户端与服务器端交互时,都得先建立连接,交互完毕之后,关闭连接
			-> 无状态：
				-> 服务器端只能记住当次请求状态
		-> 发展历史
			-> http 1.0	：目前主流版本
			-> http 1.1 ：较新版本(向下兼容)
			-> http 2.0 ：最新版本
	-> 请求协议：
		-> GET请求方式
			-> 请求行
				-> 请求类型：GET
				-> 请求地址：URL?key=value;
				-> 状态码：服务器端的状态
					-> 200：success   表示请求成功
					-> 1xx：得到服务器端的信息
						-> 一般实际开发中很少出现
					-> 2xx：表示请求成功
						-> 200：请求成功
						-> 201：创建连接 
						-> 202：接收请求  (服务器端)
					-> 3xx：表示重定向
						-> 301：表示永久重定向  浏览器会自动记住
						-> 302：表示临时重定向	浏览器不会自动记住
						-> 304：表示服务器端资源没有变化,访问缓存
							-> 问题：这次请求没有真正地访问服务器端,而是访问的缓存
						-> 305：表示使用代理
					-> 4xx：客户端错误
						-> 400：错误的请求
						-> 404：请求的网页不存在
						-> 403：拒绝访问
						-> 405：请求类型不允许
					-> 5xx：服务器端错误
						-> 500：服务器错误
						-> 502：路径错误
						-> 504：请求超时
						-> 505：http版本不支持
				-> 协议版本
			-> 请求头
				-> 请求头的格式
					-> key：value
					-> key：value1,value2....
				-> 请求头含义
					-> Accept：表示服务器端接受的MIME类型
						-> MIMEE类型：文件类型
							-> 定义方式：
								// 定义MIME类型
								-> <mime-mapping>
									  //文件的扩展名
									<extension>jpg</extension>
										//对应的 MIME类型
									<mime-type>image/jpeg</mime-type>
								   </mime-mapping>
						-> 常见的MIME类型
							-> html：text/html
							-> htm：text/html
							-> xhmtl：applicatio/xhtml+xml
							-> css：text/css
							-> js：text/javascript    application/javasctipt
							-> json：application/json
							-> text：text/plain
					-> Accept-Encoding：表示服务器端是否接收压缩
						-> gzip：是指一种服务器端的压缩格式
						-> 问题：客户端请求的数据内容越大
							-> 对网络带宽的要求越高,流量占用大
							-> 用户体验不好：速度慢,对服务器造成很大压力
					-> Accept-Language：表示服务器端接受的语言
						-> zh-CN：简体中文
						-> zh-TW：繁体中文
						-> us：英文
					-> Connection：表示当前的连接状态
						-> keep-alive：表示保持连接
					-> Host：表示当前电脑的地址(IP:端口号)
					-> Referer：表示当前的请求来源于那里
						-> 实现 盗连接
					-> User-Agent：浏览器版本和电脑window的版本  还有浏览器内核
				-> 请求体：空
		-> POST请求方式
			-> 请求行
				-> 请求类型：POST
				-> 请求地址：URL
				-> 状态码：200 ok
				-> 协议版本
			-> 请求头
				-> Cache-Control：缓存控制
					-> max-age=0：设置缓存最大活动周期
						-> 0：表示没有缓存
						-> 设置缓存保存的最大时间的单位为 毫秒/秒
				-> Content-Length：请求数据的长度(大小)
				-> Content-Type：请求的MIME类型
					-> <from>表单提交的默认的类型
						-> 一般文件上传时,类格式为：
							-> application/x-www-form-urlencoded
			-> 请求体
				-> 请求参数
	-> 响应(Response)协议：
		-> 响应行
			-> 状态码
			-> 协议版本
		-> 响应头
			-> Connection：表示当前的连接状态
				-> keep-alive：表示保持连接
			-> Content-Length：响应数据的长度(大小)
			-> Content-Type：响应数据的MIME类型 设置响应页面编码
				-> 一般情况下 都是以 ：text/html方式返回
				-> 设置的响应页面编码格式为 ：charset=UTF_8
			-> Date：响应的日期时间
			-> Keep-Alive：设置保持连接的超时和最大存活时间
				-> timeout=5,max=99
				-> 一般都是在 Connection 的值设置为 Keep-alive时才会有该值
			-> Server：响应服务器端的信息
		-> 响应体
			-> 服务器端向客户端进行响应的数据内容
	-> 扩展：
		-> 请求类型：
			-> GET：最常使用
			-> POST：最常使用
			-> HEAD
			-> PUT
			-> DELETE
			-> OPTIONS
			-> TRACE
	-> 标准API：标准的请求方式  (无论哪个终端 统一请求方式)
		-> GET：获取数据
		-> POST：修改数据
		-> PUT：新增数据
		-> DELETE：删除数据
		
	-> 请求参数：
		-> GET请求方式
			-> 将请求数据放在浏览器地址栏： url?key:value
				-> 安全性相对较低
			-> 请求地址的长度是有限的
				-> 请求数据内容过多   会造成数据丢失
			-> 如果请求数据中包含中文,需要转码
				-> 更容易出现 中文乱码问题
		-> POST请求方式
			-> 浏览器地址栏看不到请求参数
				-> 安全性相对较高
			-> 请求数据在请求体中
				-> 对数据的大小(长度)没有限制
			-> 如果请求数据中包含中文,可以不转码
				-> 相对于来讲,对中文乱码的处理比较好
				
	-> GET与POST请求方式的区别
		-> GET请求方式
			-> 请求行	
				-> 请求类型：GET
				-> 请求地址：URL?请求参数
				-> POST请求方式
			-> 请求体：空
		-> POST请求方式
			-> 请求行
				-> 请求类型：POST
				-> 请求地址：URL
			-> 请求体：参数
		
	-> 头信息
		-> 通用头(请求与响应)信息
			-> Connection
			-> Content-Length
			-> Content-Type
			-> Date
		-> 特殊响应头
			-> 控制是否缓存头信息
				-> Cache-Control：值为0时 表示不缓存	(针对非IE浏览器)
				-> Expires：值设置为0时 表示不缓存  (针对IE浏览器)
				-> 注意：一般情况下 Web应用是允许 缓存的
			-> 控制头信息
				-> HTML页面：使用<meta http-equiv="Cache-control" content="no-cache" />	(源元素)
					-> 这句话代表  当前html页面 不缓存数据
				-> PHP页面：
					-> header()函数设置头信息
					-> response.Addheadr(key,value); (不常用)
					
	-> HTTP基本优化
		-> 域名解析
			-> 在HTML页面尽量减少外部链接
		-> 尽量减少与其他网址的交互
		-> 创建连接
			-> 客户端尽量的减少与服务器端的交互
				-> 减少请求次数
				-> 使用异步交互
				-> 使用例如 Socket 这种协议(实时连接)
		-> 发送请求
		-> 等待响应
			-> 主要从服务器端进行优化
				-> 将响应的数据压缩
				-> 尽量的缩短等待响应的时间(timeout)
		-> 接收响应
	
	-> 安全的HTTP协议
		-> HTTP协议
			-> http://
			-> 默认端口号为80
		-> HTTPS协议：使用 OpenSSL安全协议
			-> https://
			-> 默认端口号为443