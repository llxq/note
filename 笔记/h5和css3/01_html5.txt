-> HTML5
	-> HTML5永远都不可能离开JavaScript
	
-> HTML5在移动端支持好于pc端
	
-> HTML5新表单：
	-> input新类型
		-> email类型：在表单提交的时候,会自动验证是否包含"@"和@后面是否包含数据
			-> 问题：验证逻辑并不完整
		-> 搜索类型：search 
		-> URL类型：url
			-> 作用：在提交表单的时候,验证是否包含"http://"	验证逻辑并不完整
		-> 电话号码类型：tel
			-> 注意：效果只能在手机端显示,光标移动到上面的时候会出现数字键盘
		-> 数字类型：number
			-> 三个属性
				-> min：设置最小值
				-> max：设置最大值
				-> step：设置步长,默认值为1
		-> 范围类型：range
			-> 四个属性：
				-> min：设置最小值
				-> max：设置最大值
				-> step：设置步长
				-> value：设置当前值
			-> 值改变的时候触发onchange事件
		-> 颜色类型：color
			-> 弹出调色板
		-> 日期类型：date
			-> 点击弹出日历窗口
		-> 周类型：week
			-> 也是弹出一个窗口
		-> 月类型：month	效果一样
	-> 表单新元素
		-> datalist元素：定义备选项(不在页面显示)
			-> 是一个表单特有的元素,它可以使用list属性预创建一组列表项,后面可以为输
				入框的输入提示
			-> option元素：
				-> 设置当前datalist中的预定义值
			-> 将input的list属性值设置为datalist元素的id值
			-> 效果和select类似
			-> 特点：
				-> 数据与结构的分离
					-> 数据：预定义数据内容<datalist>
					-> 结构：显示在HTML页面中的元素<input>
			-> 优点：datalist元素定义的数据可以重复使用
		-> progress元素：进度条
			-> 表示一个任务的完成进度,而且通常这些任务都在表单中启动和处理
			-> 两个属性值
				-> max：设置最大值
				-> value：表示当前的进度值
		-> <meter>元素：刻度
			-> 与 <progress> 类似,可用于显示刻度,而非进度
			-> 属性：
				-> min和max：设置范围边界
				-> value：确定测量的值(当前值)
				-> low：低预警值
				-> high：高预警值
		-> <output>元素：输出
			-> 通常用于显示表单元素处理的结果值   (输出)
			-> 属性：
				-> for：里面填写需要运算的表达式(使用id值)
	-> 表单新属性
		-> placeholder属性：设置默认值的
		-> multiple：允许输入多个值,多个值之间使用逗号分隔
		-> outfocus：自动获取焦点
		-> form属性：允许将表单元素定义在<form>元素之外
			-> <form>元素外的表单元素,使用该属性
			-> form的值填写为需要绑定的<form>的id属性的值
	-> 表示新验证属性：
		-> required属性：防止为空的时候提交。该属性不需要设置任何值
		-> pattern属性：实现元素的验证,支持正则表达式定制验证规则  ！正则不需要加//
			-> 注意：并不能验证当前元素是否为空
		-> min和max属性：用于包含数字或日期的input类型规定限定(约束)
			-> 验证当前元素值最大值和最小值
			-> 一般适用于number、range等元素
		-> minlength和maxlength：限定当前元素允许的最小字符和最大字符数
			-> minlength：输入值时,允许输入小于指定值,表单提交的时候验证
				-> 注意：minlength并不是HTML5的新属性,底层有
			-> maxlength：输入值时,长度不能大于指定值
		-> validity属性：
			-> 利用validityState对象描述指定元素的有效状态
			-> 表单验证HTML5提供一种有效状态
			-> 有效状态通过validitysState对象获取到
				-> validityState对象代表了有效状态,可以实现对指定元素进行约束验证功
					能。该对象提供了一系列的属性,这些属性用于描述指定元素的有效状态
			-> validityState对象通过validity属性获取
			-> 语法：
				-> 指定元素.validity	可以得到ValidityState对象
	-> 表单验证有效状态：
		-> validity属性：
		-> 作用：
			-> 用来替换原本手动实现的逻辑
    -> 所有验证状态必须配合上诉的验证属性使用
    -> 验证(有效)状态
        -> validityState对象提供了一系列的有效状态
	-> 通过这些有效状态,进行判断
    -> 验证状态：
    	-> valid状态：返回boolean值,表示表单所有控件是否全部通过验证
			-> 注意：该状态返回true表示验证成功
	    -> elem.validity.valid
		-> valueMissing状态：判断当前元素值是否为空
			-> 用法：配合required使用
		-> typeMismatch状态：判断当前元素值的类型是否匹配
			-> 用法：配合email、number、URL等
		-> patternMismatch状态：判断输入值是否与正则表达式匹配
			-> 用法：配合pattern属性使用
		-> tooLong状态：判断当前元素值的长度是否正确
			-> 用法：配合maxlength
			-> 注意：使用了maxlength属性后,实际不可能出现长度大于maxlength的值
		-> rangeUnderflow：如果输入的内容小于min属性的值,那么这个状态就是true
			-> 用法：配合min使用
			-> 注意：并不能与max属性值进行比较
		-> stepMismatch状态：判断当前元素值是否与step设置相符
			-> 用法：配合step使用
			-> 注意：并不能与min或max属性值进行比较
		-> customError状态：如果元素使用了setCustomValidity()设置自定义错误,那么这个
							状态则返回true
			-> 用法：配合setCustomValidity()方法使用
				-> setCustomValidity()方法
					-> 作用：设置自定义的错误提示内容
					-> 问题：
						-> 一旦使用该方法修改默认错误提示信息后,即使输入正确,错误提
							示依旧存在(造成逻辑错误)
					-> 解决办法：
						-> 判断如果用户输入正确后,将该方法设置提示内容修改为空
						-> 问题：
							-> 使用valid状态判断输入是否正确
								-> 一旦使用该方法,validityState对象所有状态都
									返回false

-> required属性	底层代码应该具有事件
-> 表单提交	具有提交事件
-> 注意：
    -> 先触发input元素的required对应的事件
    -> 再触发onsubmit事件
    -> required底层具有的事件,阻止了事件冒泡,配合required验证属性完成表单验证功能,使用onsubmit事件
-> 解决：	
    -> 使用focus,当失去焦点的时候,判断是否为空(valueMissing)
	
-> 逻辑完整性