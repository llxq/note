-> 伪元素 befor和after中 content可以使用 attr获取自定义属性
	-> div::after {content: attr(data-ate)}

-> css2中设置透明度
	-> opacity：设置透明度
		-> 为父元素设置了透明度,子元素也继承了父元素的透明度,并且子元素无法修改透明度
	-> transparent：透明
	

-> css3中设置颜色模式
	-> rgba(red,green,blue,透明度)
	-> hsla(色调,饱和度,亮度,透明度)
		-> h 色调：0-360   0：红色	120：绿色	240：蓝色
		-> s 饱和度：0%-100%
		-> l 亮度：0%-100%
		-> a alpha(透明度)：0-1
		
-> css3中的文字处理
	-> text-shdow：x轴偏移量  Y轴偏移量 模糊程度 阴影颜色
		-> 多个阴影用逗号分隔  text-shdow:1px 1px 1px red,1px 1px 1px balck;
		
-> css3中的盒子模型
	-> border-sizing：content-box/border-box
		-> content-box：默认值,和普通盒子模型一样
		-> border-box：设置padding和border,只能撑大或缩小context-box的大小,总体大小
						不变
					
-> 私有化前缀
	-> 就是在属性或者属性值前面添加：-webkit-(chrome,苹果)  -moz-(firefox)  
									 -ms-(ie)  -o-(opera)
									 
-> 圆角：
	-> border-radius:上下/左右
		-> 取值使用百分比好
		-> 没值取对角的值
		
-> 背景
	-> 背景可以设置多张,用逗号分隔
	
-> 渐变
	-> 线性渐变 
	  -> background-image:linear-gradient(to 方向,起始颜色 占比,终止颜色 占比);
	-> 径向渐变
	  -> background-image:radial-gradient(设置渐变显示的形状 设置渐变大小 at 中心点位置,起始颜色 占比,终止颜色 占比)
		-> 形状：
			-> circle：圆形
			-> elipse：椭圆  (默认值)
			
-> 过渡：
	-> transiation：过渡属性名称  过渡需要的时间;
	-> 多个过渡用逗号分隔
		-> transition:width 2s,background-color 2s;
	-> 如果多个过渡的 特性是一样的 可以简写为 all
		-> transition:all 2s;
	-> transition: 过渡属性名称 过渡需要的时间  渐变曲线;
		-> 渐变曲线：
			-> linear：规定以相同速度开始至结束的过渡效果(等于cubic-bezier(0,0,1,1))
			-> ease: 规定慢速开始,然后变快,然后慢速结束的过渡效果(cubic-bezier(0.25,0.1,0.25,1))
			-> ease-in：规定以慢速开始的过渡效果(等于 cubic-bezier(0.42,0,1,1))
			-> ease-out：规定以慢速结束的过渡效果(等于 cubic-bezier(0,0,0.58,1))
			-> ease-in-out:规定以慢速开始和结束的过渡效果(等于 					cubic-bezier(0.42,0,0.58,1))
			-> cubic-bezier(n,n,n,n)：在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值
	-> transition：过渡属性名称 过渡需要的时间 渐变曲线 延时时间;
		-> 设置过渡延时几秒执行
		
-> backface-visiblity：元素背面是否可见
	-> backface-visiblity:hidden		隐藏元素背面
	
-> 实现真正的3D效果：
	-> 给父元素设置 transform-style：preserve-3d
		-> 可以让里面的子元素保持3D效果,让元素位于3D空间内
	-> 给父元素设置 transform-style：flat	
		-> 指定子元素位于此元素所在平面  (默认值)
		
-> 动画
	-> 动画是css3中具有颠覆性的特征之一,可通过设置多个节点来精确控制一个或一组动画,
		常用来实现复杂的动画效果
	-> 必要元素：
		-> 通过 @keyframes 指定动画序列
		-> 通过百分比将动画分割成多个节点
		-> 在各节点中分别定义各属性
		-> 通过 animation 将动画应用于相应元素
	-> 属性：
		-> animation-name：设置动画序列名称
		-> animation-duration：设置动画持续时间
		-> animation-iteration-count：设置动画执行次数
			-> infinite：表示一直(无限次)运动
		-> animation-direction：设置动画的方向 正常normal
			-> alternate：反向
		-> animation-delay：动画延时时间
		-> animation-fill-mode：设置动画结束后盒子的状态
			-> forwards：让动画保持结束时的状态
			-> backwards：回到初始状态(默认值)
		-> animation-timing-function：动画执行速度(动画的运动曲线)
			-> linear：线性
			-> ease-in：加速
			-> eas-out：减速
			-> ease-in-out：先加速后减速
			-> steps(数值)：过渡效果步数分为当前设置的值
	-> 定义动画 
		-> 浏览器兼容问题：
			@-webkit-keyframes
		-> @keyframes 动画名 {
			from {初始状态}
			to {结束状态}
		}
	-> 调用动画：
		-> animation:动画名称 持续时间  //这两个属性是必须的
		-> animation:动画名称 持续时间 执行次数
			-> 执行次数填写：infinite：表示一直(无限次)运动
		-> animation:动画次数 持续时间 执行次数 是否反向
			-> 是否反向：alternate：反向
		-> animation：动画名称 持续时间 执行次数 是否反向 运动曲线 延迟执行
		
	-> 定义多组动画：
		-> @keyframes gun{
			0%{}
			25%{}
			50%{}
			75%{}
			100%{}
		}
	-> 暂停动画：
		-> animation-play-state：paused;
	-> 播放动画：
		-> animation-play-state：running
		
		
-> 伸缩布局：(所有布局都是自适应)
   -> 概念：
   	-> 主轴：Flex容器的主轴主要用来配置Flex项目,默认是水平方向
	-> 侧轴：与主轴垂直的轴称之为侧轴,默认是垂直方向
	-> 方向：默认主轴是 从左到右,侧轴默认从上到下
	-> 主轴和侧轴并不是固定不变的,通过flex-direction可以互换
   -> 设置伸缩(弹性)布局
	-> display:flex;
	-> 盒子的排列方式默认是根据主轴 从右向左
   -> 必要元素：
   	-> 指定一个盒子为伸缩盒子  display:flex
	-> 设置属性来调整此盒子的子元素的布局方式 例如：flex-direction
	-> 明确主轴及方向
	-> 可以互换主侧轴,也可以改变方向
   -> 属性：
   	-> flex-direction 调整主轴方向(默认为水平方向)
	   -> 改属性通过定义flex容器的主轴方向来决定flex子项在flex容器中的位置 
	      -> row：水平方向
	      -> row-reverse：反转  从右向左 顺序排列
	      -> column：垂直方向   从上到下 顺序排列
	      -> column-reverse：反转列	  从下到上 顺序排列
	-> justify-content：设置或检索弹性盒元素在主轴(横轴)方向上的对齐方式
	   -> flex-start：起点对齐  从主轴开始方向对齐  从左到右 顺序排列
	   -> flex-end：结束对齐	从主轴结束方向对齐  从右向左 反向排列
	   -> center：中心对齐 盒子自动居中对齐
	   -> flex-space-round：在父盒子中平分
	   -> flex-bettwen：两端对齐,中间平分
	-> 不指定flex属性,则不参与分配
	-> align-items：设置或检索弹性盒元素在侧轴方向上的对齐方式
	   -> flex-start：起点对齐	顶部对齐,从左到右,顺序排列
	   -> flex-end：结束对齐	底部对齐,从左到右,顺序排列
	   -> center：中心对齐 		竖直中心对齐,从左到右,顺序排列
	   -> stretch：拉伸			盒子高度为auto 竖直方向拉伸盒子
	   -> baseline：基线	该值与flex-start等效
	-> 伸缩比例
	   -> flex：数值  这个数值代表的是该盒子的占比,数值越大占比约多 按比例分配
	   -> flex不设置值的话不参与分配  剩下的设置了的按比例分配

-> overflow可以清楚浮动,ie使用zoom可以清除浮动

-> web字体：
	-> 我们需要为不同浏览器设置不同格式的字体
	-> 通常我们会通过字体生成工具帮我们生成各种格式的字体,因此无需过于在意字体格式之
	   间的差异
	-> 字体图标
		-> webfont的使用和矢量图的方式是一样的
		-> 使用矢量图标的时候 必须给容器里面写指定编码
			-> 每个矢量图标对应一个唯一的编码
		-> 如果使用 after 或者 before 添加图标
			-> 把编码的&#X(前三位符号去掉)去掉  换成一个 \	后面分号也要去掉
			   在将字体定义为 自定义的字体
		-> 使用伪元素的好处就是可以给任何一个元素添加  无需再次写
	-> 使用方式：
		/*声明字体*/
		@font-face {
			font-family: 'webfont';
			src: url('font/webfont.eot'); /* IE9*/
			src: url('font/webfont.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */
			url('font/webfont.woff') format('woff'), /* chrome、firefox */
			url('font/webfont.ttf') format('truetype'), /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/
			url('font/webfont.svg#webfont') format('svg'); /* iOS 4.1- */
		}
		/*定义webfont样式*/
		.web-font{
			font-family:"webfont" !important;
			font-size:16px;
			font-style:normal;
			-webkit-font-smoothing: antialiased;
			-webkit-text-stroke-width: 0.2px;
			-moz-osx-font-smoothing: grayscale;
		}	
		
-> 鼠标滚轮事件：
	-> onmousewheel事件
	-> 全屏滚动插件：
		-> fullpage.js
		-> 基于 jquery的插件
		-> 支持手机、平板触屏、css3动画
		-> 可以设置滚动宽度、背景颜色、滚动速度、循环选项、回调、文本对齐方式等
		
-> css优化：
	-> css优化的作用：
		-> 减轻服务器压力
		-> 缩短服务器响应时间
		-> 提高用户的体验度
	-> 尽量减少HTTP请求个数
		-> css sprites：合并多个背景图像到一个单独图像,然后通过background-image和
		   background-position进行调整
		-> Image maps：结合多个图像到一个单独图像。其总体规模大致是相当的,但是减少
						HTTP从而加快页面的显示速度
	-> 页面顶部引入CSS
		-> 可以提高页面加载速度
		-> 样式放在头部,允许页面逐步呈现
	-> 将CSS和JS放到外部文件中
		-> 页面引入外部文件,将由浏览器缓存
		-> 后续页会使用缓存 
	-> 合并样式
		-> 提前定义统一的样式
		-> 利用Css继承
	-> 缩小样式文件
		-> 尽量使用简写属性
	-> 使用更优的样式属性值
		-> border:none;
	-> 减少样式重写
		-> 使用 Reset	但并不是全局 Reset 比如针对性的清除边距
	-> 代码压缩
		-> 使用工具压缩CSS代码
		-> 比如 yuicompressor
	-> 不要在HTML中缩放图像
		-> 图像在网络传输时任然保持原来图像的字节数
	-> 避免空的src和href
	
-> 清除浏览器默认点击时的高亮效果
	-> tap-highlight-color：transparen
	
-> resize：规定是否允许用户调整元素的大小

-> appearance：none    去除表单元素默认的效果