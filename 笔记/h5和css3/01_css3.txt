-> 伪类选择器：
	-> 目标伪类：
		-> 目标伪类就是突出显示活动的HTML锚,用于选取当前活动的目标元素
		-> 语法：
			-> :target
			-> div:target
	-> 元素状态伪类：
		-> 元素状态伪类就是主要匹配元素的禁用、启用、选中状态
		-> 常用的状态伪类
			-> :disabled	匹配每个被禁用的元素
			-> :enabled		匹配每个已启用的元素
			-> :checked		匹配每个被选中的元素(只用于单选按钮和复选框)
	-> 结构伪类：
		-> 结构伪类主要就是从元素的结构(层级结构)上进行划分的
		-> 什么时候使用：
			-> 找 第一个子元素、最后一个子元素、没有子元素、仅仅只包含一个子元素
		-> 如何使用：(不加父元素 默认为所有符合元素)
			-> :first-child		匹配属于父元素的首个元素
			-> :last-child		匹配属于父元素的最后一个元素 
			-> :empty			匹配没有子元素的元素(文本也不能有)
			-> :only-child		匹配属于其父元素的唯一子元素
			-> :nth-child(n)	匹配属于父元素的第n个元素
			-> :nth-type-of(n)	匹配属于其父元素的第n个元素
				-> 括号里面也可以填写 odd(奇数) 或者 even(偶数)
				-> 可以填写 n , n 表示0,1,2,3,4,5.....
				-> 2n 表示偶数   2n+1表示奇数
				-> -5+n 表示选中前五个  只能是这种格式
				-> 7n 表示选中7的倍数
			-> :nth-last-child(-n+5)	//选中后五个
	-> 否定伪类：
		-> 匹配非指定元素或选择器的每个元素
		-> 语法：
			-> :not(selector)   匹配不满足的元素
				-> selector：元素/选择器				
	-> 伪元素选择器：(与代码无关,只与页面效果有关)
		-> 主要针对元素中的文本内容进行匹配的
		-> ::first-letter		用于选取指定选择器 内容 的首字母
			-> 一般用于 排版、首字符突出等操作
		-> ::first-line			用于选取指定选择器 内容 的首行
		-> ::selection			匹配用于被选取的内容部分
			-> 通常改变字体和背景颜色
	-> 伪元素：
		-> ::before
			-> content:"";		//必须写的  可以设置样式
		-> ::after
			-> content:"";
	
	
-> 内容生成：
	-> 内容生成就是通过css向元素的前面或后面增加一部分内容
	-> 伪元素：
		-> :before	    匹配到某一元素的最前面
		-> :after		匹配到某一元素的最后面
	-> 内容生成：
		-> content		配合 :before 和 :after 插入生成内容
			-> 常用取值：
				-> 字符串：纯文本,插入到指定位置
				-> URL：可以添加图片
	-> 计数器
		-> 计数器的作用：向已存在的HTML文本内容增添序号
		-> 如何使用计数器
			-> 定义计数器
				-> 属性：counter-reset
					-> 作用：定义一个计数器,并且默认初始值为0
					body {
						counter-reset:计数器名称 初始值 计数器名称 初始值
						;
					}
			-> 设置计数器的增量 (那个元素用,那个元素声明)
				-> 可以单独设置某一选择器使用计数器时的增量,默认值是1
				-> 属性：counter-increment
					div {
						counter-increment:count 10(该值为增量);
					}
			-> 使用计数器：
				-> 通过 counter(计数器名称) 来使用计数器
				
-> 多列
	-> 分隔符
		-> 把一段文本拆分成几列
		-> 属性：column-count：规定元素被分隔的列数
	-> 列间隔：
		-> 设置列与列之间的间隔
		-> column-gap：间隔
	-> 列规则
		-> 可以在列与列之间设置一条间隔线,列规则就是设置这条线的样式、颜色、粗细
		-> column-rule：大小 样式 颜色
			-> column-rule-width
			-> column-rule-style
			-> column-rule-color
	-> 浏览器的兼容问题
		-> FireFox需使用前缀	-moz-
		-> Chrome和Safari：-webkit-
		
-> Css Hack
	-> 为什么需要Css Hack：浏览器兼容性所引发的问题
	-> 浏览器运行模式：
		-> 混杂模式
		-> 标准模式(Standart Mode)
		-> 准标准模式(Almost Standart Mode)
	-> 浏览器主要通过 DOCTYPE 进行模式选择
		-> 触发混杂模式：不声明DOCTYPE
		-> 触发标准模式
	
	-> 解决浏览器兼容问题：
		-> margin 和 padding
			-> ie6中 默认的 margin 偏大
			-> 解决办法：body{margin:0;padding:0}
		-> 居中布局：
			-> ie6以及低版本浏览器：通过设置父元素的：text-align:center  完成居中
			-> 高版本浏览器(ie7+,chrome,firefox,opera,safari)：通过设置当前元素的
			   margin:0 auto 完成居中
		-> 元素高度与内容：
			-> ie6(包括ie6之下的)：元素的高度至少包括内容
			-> 其他：元素高度会超出容器
			-> 解决方案：overflow属性
		-> 子元素设置上外边距时
			-> ie6：正常显示
			-> 其他版本：子元素的上外边距会被认为是父元素的上外边距
			-> 解决方案：
				-> 为父元素设置边框
				-> 设置父元素的padding-top
	-> CSS Hack的原理
		-> 主要有：
			-> CSS 类内部 Hack
			-> 选择器 Hack
				-> 在css选择器前加上一些只有特定浏览器才能识别的前缀(前缀加在选择器
					前面)
					-> ie6：*前缀   比如*classname
					-> ie7：*+前缀	比如*+classname
			-> HTML 头部引用Hack
				-> 语法：(可以出现在任何位置)
					-> 通过HTML条件注释完成
						-> <!--[if 条件]>
						   <![endif]-->
					-> ie6：
						-> <!--[if IE 6]>
							  编写html代码
							  或者引入css样式等
						   <![endif]-->
				-> 即IE条件注释：
					-> 条件注释的基本结构和HTML的注释(<!---->)相同
					-> IE根据if条件来判断是否解析条件注释里的东西
				-> gt：greater than	 选择条件版本以上版本,不包含条件版本
				-> lt：less than	选择条件版本以下版本,不包含条件版本
				-> gte：greater than or equal	选择条件版本以上版本,包含条件版本
				-> lte：less than or equal	选择条件版本以下版本,包含条件版本
				-> ！：选择条件版本以外所有版本,无论高低
				-> 只在IE下生效
					-> <!--[if IE]> 这段文字只在ie浏览器显示<![endif]-->
				-> 语法：
					-> ie6：
						-> <!--[if gt IE 6]>
						   <![ednif]-->
-> 顺序：ie8	ie7		ie6