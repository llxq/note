<link rel="stylesheet" type="text/css" href="css文件路径" />

-> 浏览器的缺省设置是最低,内联样式优先级最高,外部样式与内部样式优先级：就近优先,子元素的优先
	级高于父元素的
	
-> !important规则：
	-> !important可以调整样式规则的优先级
	-> 将!important添加在样式规则之后,中间用空格隔开
		-> 选择器{属性:属性值!important;}  如：{color:blue !important}
	-> 谨慎使用
	-> 加了!important则设置为优先级为最高
	
-> 选择器：
	-> 通用选择器,显示为一个星号 *
		-> 写在*里面的样式,会给页面中所有的元素都用一遍
		-> 慎用,尽量使用,否则会降低css的样式的效率
	-> 元素选择器
	-> 类选择器：
		-> 语法：className{color:red;}
		-> 类名字不能以数字开头
		-> 所有能够附带class属性的元素都可以使用此样式声明
		-> 将元素的class属性的值设置为样式类名
		-> 可以将多个类选择器应用于同一个元素(多类选择器)
			-> HTML元素的class属性的值中可能包含一个词列表
			-> 各个词之间用空格分隔,每个词都是一个类选择器
				-> 如：<p class="first second ....."></p>
		-> 可以将类选择器和元素选择器结合起来使用,以实现对某种元素中不同样式的细分控制(分
			类选择器)
		-> 语法为：元素选择器 .className{}
		-> 将样式规则与附带class属性的某种元素匹配
			-> 元素的class属性的值为分类选择器中指定的样式类名
	-> id选择器
		-> id选择器以一种独立于文档元素的
		-> 它仅作用于id属性的值
		-> id的优先级要高于class
	-> 元素选择器>class选择器>id选择器
	-> 群组选择器
		-> 选择器声明为以逗号隔开的选择器列表
			-> 将一些相同的规则作用于多个元素
	-> 后代选择器：
		-> 依据元素在其位置的上下文关系来定义样式
		-> 又称为包含选择器,用于选择作为某元素后代的元素
			-> 选择器一端包含两个或多个用空格分隔的选择器
	-> 子代选择器：
		-> 子代选择器要求选择器之间只能存在父子关系
			-> 不希望选择任意的后代元素,而是希望缩小范围,只选择某个元素的子元素
			-> 使用一个特殊的符号大于号(>)作为子结合符
	-> 伪类选择器：
		-> 伪类用于向某些选择器添加特殊的效果
		-> 使用冒号(:)作为结合符,结合符号左边是其他选择器,右边是伪类
			-> 选择器:伪类选择器
		-> css伪类选择器可以分为：
			-> 连接伪类
				-> link：适用于尚未访问的连接
				-> visited：适用于访问过的连接
			-> 动态伪类：用于呈现用户操作
				-> :hover：适用于鼠标悬停在HTML元素时(低版本ie不支持)
				-> :active：适用于HTML元素被激活时
				-> :focus：适用于HTML元素获取焦点时
			-> 目标伪类
			-> 元素状态伪类
			-> 结构伪类
			-> 否定伪类 
	
-> css规则：	
	-> 尺寸边框:
		-> css单位：
			-> 尺寸单位：
				-> %：百分比
				-> in：英寸
				-> cm：厘米
				-> mm：毫米
				-> pt：磅(1pt等于1/72英寸)
				-> px：像素(计算机屏幕上的一个点)
				-> em：1em等于当前的字体尺寸,2em等于当前字体尺寸的两倍
			-> 颜色单位：
				-> rgb：色光三原色
				-> rgb(x,x,x)：RGB值,如rgb(255,0,0)
				-> rgb(x%,x%,x%)：RGB百分比值,如rgb(100%,0,0)
				-> #rrggbb：十六进制,如#ff0000
				-> #rgb：十六进制简写,如#ccc
				-> 表示颜色的英文单词：如red
		-> 尺寸属性：
			-> 尺寸属性是用于设置元素的宽和高的
				-> 一般单位为像素或百分比
			-> 宽度属性：
				-> width
				-> max-width
				-> min-width
			-> 高度属性一样
			-> 溢出：
				-> 使用尺寸属性控制框的大小时,如果内容所需的空间大与框本身的空间,会导致内
					容溢出
				-> overflow：当内容溢出元素框时如何处理
					-> visible
					-> hidden
					-> scroll
					-> auto
					-> overflow-x
					-> overflow-y
		-> 边框属性：
			-> 边框样式：
				-> 简写方式：
					-> border：width style color;
				-> 单边定义：
					-> border-left/right/top/bottom:width style color;
				-> border-width;
					-> border-left/right/top/bottom-width;
				-> border-style;
					-> border-left/right/top/bottom-style;
				-> border-color;
					-> border-left/right/top/bottom-color;
				-> style取值：
					-> dashed: 虚线
					-> dotted：点线
					-> solid：实线
					-> none：无
				-> color：transparent 透明
			-> 边框倒角：
				-> border-radius属性：
					-> 为简写属性,按顺时针顺序设置四个倒角
					-> 取值为绝对值或百分比
					-> 按顺时针设置,从左上开始,如果有角没有设置则和它对角的值为一致
				-> 单独定义：
					-> border-top-left-radius：边框左上角
					-> border-top-right-radius：边框右上角
					-> border-bottom-left-radius：边框左下角
					-> border-bottom-right-radius：边框右下角
			-> 边框阴影：
				-> box-shadow：向方向框添加一个或多个阴影
					-> 取值为多个属性值的列表
				-> box-shadow：h-shadow v-shadow blur-shadow spread color inset;
				-> 其中：
					-> h-shadow：必需,为水平阴影的位置
					-> v-shadow：必需,为垂直阴影的位置
					-> blur：可选,为模糊距离
					-> spread：可选,为阴影的尺寸
					-> color：可选,为阴影的颜色
					-> inset：可选,将外部阴影(outset)改为内部阴影
				-> 如果阴影不定义颜色的话,默认颜色和当前元素的color的颜色一致
				-> x和v的偏移量为负值则阴影为左上角
			-> 图片边框：
				-> border-image属性：将图片规定为包围div元素的边框
					-> border-image：source width repeat;
				-> 也可以分别设置：
					-> border-image-source:图片的路径
					-> border-image-width：图片边框的宽度
					-> border-image-repeat：图像边框是应平铺(repeat)、铺满(round)或拉伸(stretch)
				-> 浏览器在识别图片的时候,会把图片分为九宫格,然后四个角就是边框的四个角,
				   其他内容平铺,四个角是不会平铺的
				-> 每个格子切的大小和设置的width一致
		-> 轮廓：
			-> 轮廓(outline)是绘制于元素周围的一条线,位于边框边缘的外围,可起到突出元素
				的作用
			-> 简写方式：
				-> outline：color style width;
				-> outline-width：轮廓宽度
				-> outline-style：轮廓的样式
				-> outline-color：轮廓的颜色
		-> outline是在border的外边再描一层边
		-> input的焦点在的时候出现的蓝边可以使用outline去掉
	-> 框模型：
		-> 框模型：
			-> 框模型(Box Model)定义了元素框处理元素内容、内边距、边框和外边距样式
			-> width和height指内容区域的宽度和高度
			-> 增加内边距、边框和外边距不会影响内容区域的尺寸、但是会增加元素框的总尺寸
			-> 对象实际宽度=左侧外边距+左侧边框+左侧内边距+宽度+右侧内边距+右侧边框+右侧外
			   边距
		-> 外边距：
			-> 围绕在元素边框周围的空白区域是外边距
				-> 会在元素外创建额外的空白
				-> 外边距是透明的
			-> 外边距 margin：
				-> 外边距：与下一个元素之间的空间量
				-> 当上下margin相遇时,大的生效
		-> 内边距：
	-> 行内元素width和height不生效 margin-top和margin-bottom不生效,只有左右生效
	-> 背景
		-> 背景概述：
			-> 背景属性的作用：
				-> 背景样式可以控制HTML元素的背景颜色、背景图像等
				-> 背景色
					-> 设置单一的颜色作为背景
					-> 背景色background-color
						-> background-color属性用于为元素设置背景色
							-> 接受任何合法的颜色值
							-> 可取值为 transparent
						-> 为元素背景设置一种纯色
							-> 会填充元素的内容、内边距和边框区域
							-> 如果边框有透明部分,会通过这些透明部分显示出背景色
				-> 背景图像
					-> 以图片作为背景
					-> 可以设置图像的位置、平铺、尺寸等
					-> background-repeat：repeat(平铺)/no-repeat(不平铺)/repeat-x/repeat-y
					-> background-size取值：
						-> cover：把背景图像扩展至足够大,以使背景图像完全覆盖背景区域,图片
						   的某些部分也许无法显示
						-> contain：把背景图像扩展至最大尺寸,以使其宽度和高度完全适应内容
							区域
					-> background-attachment:fixed;  //让背景图固定(或者背景附件)
					-> background-position：center; 水平和垂直居中
						-> 取值可以为关键词来定义 right/center/left/bottom
					-> 背景颜色绘制区域 background-clip
						-> background-clip属性规定背景的绘制区域
							-> 可取值为：
								-> border-box：背景被剪裁到边框盒,为默认值
								-> padding-box：背景被剪裁到内边距框
								-> content-box：背景被剪裁到内容框
					-> 背景图片的定位区域 background-origin
						-> background-origin属性规定背景图片的定位区域
							-> 可取值为：
								-> border-box：背景图像相对于边框来定位
								-> padding-box：背景图像相对于内边距框来定位
								-> content-box：背景图像相对于内容框来定位
					-> 背景属性 background
						-> background 属性在一个声明中设置所有的背景属性
						-> 语法结构：
							-> background：color URL(图像URL) repeat attachment position
							-> 如果不设置其中的某个值,将使用默认值
	-> 渐变：
		-> 什么是渐变：
			-> 渐变指,两种或者多种颜色之间的平滑过渡
			-> 可以指定多个中间颜色值(色标)
				-> 每个色标包含一种颜色和一个位置
				-> 从每个色标的颜色谈出到下一个,以创建平滑的渐变
			-> 渐变可以用在任何使用背景图片的地方
				-> 线性渐变
				-> 径向渐变
				-> 重复渐变
		-> 渐变语法：
			-> 使用background-image属性进行设置
			-> 可以取值：
				-> linear-gradient：线性渐变
				-> radial-gradient：径向渐变
				-> repeating-linear-gradient：重复线性渐变
				-> repeating-radial-gradient：重复径向渐变
			-> 线性渐变：
				-> linear-gradient(angle,color-point1,color-point2....)
					-> angle：为第一个参数,指定渐变的方向,可以是角度值,也可以是关键词,如
					to top(对应0deg), to right(对应90deng), tobottom(对应180deg),to left(
					对应270deg)
				-> color-point：表示颜色的起始点,中间点或者结束点,取值为颜色和位置的组合,
				如：red 0%、green 50%;
			-> 径向渐变：
				-> radial-gradient([size at position],color-point1,color-point2...);
					-> position：为第一个参数,指定渐变的圆心位置,默认值为center;可以取值为
					数字、百分比、或者关键字;此参数可以省略
				-> color-point：表示颜色的起始地,中间点或者结束点、取值为颜色和位置的结合
				如：red 0%,green 50%;
				-> 100px at left bottom,yellow,red  //100代表圆的半径,位置为左下角
					一个center为水平居中
			-> 重复渐变
				-> 重复性渐变
					-> repeating-linear-gradient(angle,color-point1,color-point2...);
				-> 想要重复渐变必须设置color的大小
	-> 文本格式：
		-> 文本格式化概述：
		-> 字体属性：
			-> 控制字体：
				-> 小型大写字母显示：
					-> font-variant：normal/small-caps;
			-> 字体属性 font：
				-> 简写属性,包含6个值,可以按顺序设置
					-> font：font-style font-variant font-weight font-size font-fmialy
					-> 不设置值,则使用默认值                                                            
		-> 文本属性：
			-> 控制文本格式：
				-> 文本修饰：
					-> text-decoration：none/underline;
				-> 文本阴影：
					-> text-shadow：h-shadow v-shadow blur color
		-> 溢出：
			-> 处理空白：
				-> white-space：normal/nowrap; //不换行
			-> 文本溢出：
				-> text-overflow：clip/ellipsis;
		-> 换行：
			-> 长单词换行：
				-> word-warp：normal/break-word;
			-> 文本换行：
				-> word-break：normal/break-all/keep-all;
	-> 表格属性：
		-> 表格特有的属性：
			-> 边框合并 border-collapse
				-> 如果设置了单元格的边框,相邻单元格的边框会单独显示,类似于双线边框
				-> border-collapse属性：合并相邻的边框
				-> 设置是否将表格边框合并为单一边框
					-> border-collapse：separate/collapse;
		-> 垂直方向对齐：
			-> vertical-align属性
				-> 在表单元格中,设置单元格框中的单元格内容的对齐方式
			-> 取值：
				-> vertical-align：top/middle/bottom
		-> 边框边距 border-spacing (cellspacing )
			-> border-spacing属性
				-> 设置相邻单元格的边框间的距离
				-> 仅限于分隔单元格边框,即border-collapse属性为separate值的情况下,也被称为
				边框分离模式
			-> 取值为长度值,可以为该属性指定一个或者两个值
				-> 指定一个值：该值同时应用于水平和垂直间距
				-> 指定两个值：第一个值指定水平间距,第二个值指定垂直间距,且两个值之间用空
				格隔开
			-> caption-side:定义表格标题的位置
			-> table-layout：表格布局固定或不固定
				-> 固定：fixed,较为高效
				-> 不固定：默认。较为灵活
	-> 浮动：
		-> 定位概述：
			-> 定位元素框相对于其正常位置应该出现的位置,或者相对于父元素,另一个元素甚至浏
			览器窗口本身的位置
			-> 普通流定位：(默认的定位方式)
				-> 页面中的块级元素框从上到下一个接一个地排列
					-> 每一个块级元素都会出现在一个新行中(比如<p>元素、<div>元素)
					-> 元素框之间的垂直距离是由框的垂直外边距计算出来的
				-> 内联元素将在一行中从左到右排列水平布置
					-> 不需要从新行开始
					-> 可以使用水平内边距、边框和外边距调整它们的间距
			-> 浮动定位：
				-> 浮动定位是指：
					-> 将元素排除在普通流之外,即元素将脱离标准文档流
					-> 元素将不在页面占用空间
					-> 将浮动元素放置在包含框的左边或者右边
					-> 浮动元素依旧位于包含框之内
				-> 浮动的框可以向左或向右移动,直到它的外边缘碰到包含框或另一个浮动框的边框
				为止
				-> 经常使用它来实现特殊的定位效果 
				-> float属性可以让任何元素浮动
			-> 清除浮动：
				-> clear：right/left/both   
					-> both:就是清除全部浮动
					-> clear是设置元素不可以浮动的
			-> 如果因为子元素全部浮动而导致父元素没有自适应高度,可以设置父元素
					为overflow：hidden,这样父元素又可以自适应高度
			-> 行内元素加了float相当于是变为了块元素
			-> 相对定位：
			-> 绝对定位：
	-> 显示：
		-> 显示方式：
			-> "一切皆为框"：页面上所有的元素都可以显示为框
			-> 块级元素：
				-> 元素显示为一行内容,即"块框"(<div>,<p>,<h1>等....)
			-> 内联元素/行内元素
				-> 内容显示在行中,即"行内框"
			-> 除了默认的显示效果外,可以使用display属性来修改元素的显示方式,即改变框的类型
			-> display：inline/block/inline-block(有宽和高的行内属性元素)
				-> display不能代替浮动
				-> 在低版本的ie浏览器下只支持行内元素变成行内块后,在用一行显示,如果是块元
					素变成的行内块在低版本ie下依然行。
				-> display:none //可以隐藏当前元素,并且不占位置(让生成的元素根本就没有框)
		-> 显示效果：
			-> visibilty属性：
				-> 可以取值
					-> visible：默认值,元素可见
					-> hidden：元素不可见,但依然占空间
					-> collapse：用在表格元素时,可删除一行或一列,且不影响表格的布局
			-> 即使不可见的元素也会占据页面上的空间,可以使用display属性来创建不占据页面空
				间的不可见元素
			-> opacity属性：
				-> opacity属性设置元素的不透明度
					-> 取值 opacity：value
					-> value规定了不透明度,从0.0(完全透明)到1.1(完全不透明)
			-> vertical-align属性：
				-> 设置单元格框中的单元格内容的居中方式
				-> 对于行内块级元素,如<img>,可以设置垂直对齐方式
					-> 定义行内元素的基线相对于该元素所在行的基线的垂直对齐
				-> 常用取值：
					-> baseline：默认,元素放置在父元素的基线上
					-> top：把元素的顶端与行中最高元素的顶端对齐
					-> bottom：把元素的顶端与行中最低元素的顶端对齐
					-> middle：把此元素放置在父元素的中部
				-> vertical-align：top/middle/baseline(只对行内元素或者行内框元素生效,对框
					元素无效)
				-> 如果行内元素加了vertical-align就可以分别定义margin-top/bottom,不会影响
				同一行里的其他元素
		-> 光标：
			-> 默认情况下,光标会根据用户的操作发生改变
				-> 当鼠标悬停在一个链接上的时候,光标会从指针形状变为手状形状
				.....
				-> 可以使用cursor属性指定显示给用户的鼠标光标类型(形状)
			 -> default：设置为默认的样式,就是那个箭头的,当鼠标指向那些会使得鼠标形状发生
				变化的时候,设置为默认值可以使得他不发生改变,还是为箭头
			-> crosshair：十字架
			-> pointer：小手
			-> help：箭头边上出现一个小图标
			-> wait：就是等待那个圈圈

	-> 元素嵌套的时候,行内元素不要嵌套块元素
	-> 如果当前块元素没有设置宽度或者高度的时候给他添加padding的话是不会撑大当前元素的
	-> 行内 元素加了float就可以设置宽和高了
	
	-> 列表：
		-> 列表样式：
			-> 列表项标志：
				-> list-style-type：属性用于控制列表中列表项标志的样式
					-> 无序列表：出现在各列表项旁边的圆点
					-> 有序列表：可能是字母、数字或另外某种计数体系中的一个符号
			-> 无序列表取值：
				-> none：无标记
				-> disc：实心圆,为默认值
				-> circle：空心圆
				-> square：实心方块
			-> 有序列表取值：
				-> none：无标记
				-> decimal：数字(如1,2,3,4,5),为默认值
				-> lower-roman：小写罗马数字(如i,ii,iii,iv,v)
				-> upper-roman：大写罗马数字(如I,II,III,IV,V)
				-> 等
			-> 列表项图像 list-style-image
				-> list-style-image属性使用图像来替换列表项的标记
					-> 取值：url(),指定图像作为有序或无序列表项的标记
			-> 列表项位置 list-style-position：
				-> list-style-position属性可以控制列表标记的位置：就是控制前面标记的位置
					-> 可取值：
						-> outside：标记位于文本的左侧,且放置在以外,为默认值。
						-> inside：标记放置在文本内
	-> 定位:
		-> 相对定位：
			-> 元素仍保持其未定位前的形状
			-> 元素原本所占的空间仍保留
			-> 元素框会相对于它原来的位置偏移某个距离
				-> 设置垂直或水平位置,让元素相对于它的起点进行移动
			-> 设置元素为相对定位：
				-> 首先需要设置position属性的值为 relative
				-> 然后使用left属性或者right属性设置的偏移量
				-> 也可以使用top/bottom/right/left属性设置垂直方向的偏移量
		-> 绝对定位：
			-> 将元素的内容从普通流中完全移除,不占空间
			-> 并使用偏移属性来固定该元素的位置
				-> 相对于最近的已定位祖先元素
				-> 如果元素没有已定位的祖先元素,那么它的位置相对于最初的包含块,比如body
			-> 设置元素为绝对定位：
				-> 首先需要设置position属性的值为 absolute
				-> 然后使用left属性或者right属性设置的偏移量
			-> 如果想要子元素相对于父元素偏移,那么需要给父元素设置position值
		-> 固定定位：
			-> 将元素的内容固定在页面上的某个位置
				-> 元素从普通流中完全移除,不占用页面空间
				-> 当用户向下滚动页面时元素框并不随着移动
			-> 设置固定定位：
				-> 首先需要设置position属性的值为 fixed
				-> 通过left/right/top/bottom这些偏移属性来定义元素的位置
		-> 在普通流定位下,元素的上下层叠顺序由代码的书写顺序决定,写在下方的框会覆盖在写在
			上方的框的上面
		-> 只要给元素加了position(不管取值为什么),那么该元素就会在最上面
		-> z-index：设置元素的堆叠顺序
			-> z-index要生效,要求参与在其中的元素必须都已经定位
			-> 当z-index的值为负数的时候,该元素会在所有元素的下面