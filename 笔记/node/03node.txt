-> Promise
	-> 解决回调函数的嵌套过多带来的问题
		-> EcmaScript6 中新增了一个 API ：promise
		-> Promise的英文就是承诺、保证的意思

		
-> path模块
	-> path.basename
		-> 获取一个路径中的文件名(包含扩展名)
	-> path.dirname
		-> 获取一个路径中的目录部分
	-> path.extname
		-> 获取一个路径中的文件扩展名
	-> path.parse
		-> 把一个路径转为对象
			-> root：根路径
			-> dir：目录
			-> base：文件名(包含扩展名)
			-> ext：扩展名
			-> name：不包含扩展名的文件名
	-> path.join
		-> 使用该方法可以进行路径拼接
	-> path.isAbsolute
		-> 判断一个路径是否是绝对路径
		
-> Node中的非模块成员
	-> 在每个模块中除了 require、express等 模块相关API之外，还有两个特殊的成员
	-> 都是动态获取，随着文件路径改变而改变
		-> __dirname：可以用来获取当前文件模块所属目录的绝对路径
		-> __filename：可以用来获取当前文件的文件名
	-> __dirname 和 __filename 是不受执行 node 命令所属路径影响的
		
-> 在文件操作中，相对路径设计的就是相对于执行 node 命令所处的路径
-> 在文件操作中，使用相对路径是不可靠的，因为在Node中文件操作的路径被设计为相对于执行Node命令所处的路径
-> 所以为了解决这个问题，只需要把相对路径变为绝对路径即可
-> 这个时候我们就可以使用 __dirname 或者 __filename 来解决这个问题
-> __dirname 和 __filename 是不受执行 node 命令所属路径影响的
	-> 推荐使用 parse.join 来拼接路径
	
-> 模块中的路径标识和这里的路径没关系，不受影响，就是相对于文件模块

-> 模板引擎
	-> {{ include './header.html' }}  
		-> 这个可以引入外部的文件到指定位置
	-> {{ block 'head' }}
			-> 这个就是相当于是一个占位符，没有被引用的话，这个就是默认值
	   {{ /block }}
	   	-> 在模板中引用的话 {{ block 'head' }} 填充的内容 {{ block }}
	-> {{ extend '模板路径' }}   可以继承指定模板里面的内容
		