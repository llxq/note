-> 过滤器
    -> Vuejs 允许自定义过滤器，可以被用作一些常见的文本格式，过滤器可以用在两个地方：mustachc插值 和 v-bind表达式，顾虑器应该被添加在 JavaScript 表达式的尾部，由 '管道' 符提示

    -> 过滤器调用格式
        -> {{ name | 过滤器名称 }}
    -> 定义一个过滤器
        -> Vue.filter('过滤器名称'，(data) => {
            // 对传过来的数据进行处理
        })
     -> 自定义过滤器的 回调函数，第一个参数，已经被定死了，永远都是过滤器 管道符前面 传递过来的数据
     -> 过滤器的 回调函数，第一个参数后面的参数，就是过滤器自己传递过来的参数
        -> 这样定义的是全局过滤器
            Vue.filter('msgFormat', data => {
                return data.replace('/我/g', '你');
            })
    -> 过滤器需要定义在 vue 实例前面
    -> 过滤器可以多次调用
        -> {{ name | 过滤器1 | 过滤器2 | .... }}

    -> 定义私有的过滤器
        -> 在 vue 实例中，还有个对象， filters
            -> new Vue({
                el: '',
                data: {},
                methods: {},
                filters: {
                    // 里面定义 私有过滤器
                }
            })

    -> 过滤器的调用原则：就近原则，如果私有过滤器与全局过滤器的名称一致，则优先调用私有过滤器


-> 自定义按键修饰符
    -> 自定义全局按键修饰符
        -> Vue.config.keyCodes.起的别名 = 键盘码的值;
            -> Vue.config.keyCOdes.f2 = 112;
            -> 这个时候就可以通过： @kyeup.f2 = ""  按下 f2 触发该方法

-> 自定义指令
   -> 注意：Vue中所有的指令，在调用的时候都是以 v- 开头的
   -> 自定义全局指令：
     -> 使用 Vue.directive()  定义全局的指令
        -> Vue.directive('指令的名称', {
            // 在该对象中，所有的函数，第一个参数永远都是 el，表示 被绑定了指令的那个元素，这个 el 参数，就是一个原生的 js 对象
            // 在该对象中 ，第二个参数是个对象，有一些指令相关的函数，这些函数可以在特定的阶段，执行相关的操作
                // name：指令名，不包括 v- 前缀
                // value：指令的绑定值，例如：v-demo="1+1"，value的值为 2
                // oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中有效，无论值是否改变都有用
                // expression：绑定值的字符串形式。例如：v-demo="1+1" ，expression 的值是 '1+1'
                // arg：传给指令的参数，例如：v-demo:foo   arr 的值为 'fool'
                // modifiers：一个包含修饰符的对象，例如：v-demo.foor.bar，修饰符对象 modifiers的值：{foo：true，bar：true}
                // vnode：Vue编译生成的虚拟节点
                // oldVnode：上一个虚拟节点，仅在 update 和 componentUpdate 钩子中可用

            // el：就是将元素绑定到的那个元素上
            bind(el，binding){
                // 每当指令绑定到元素上的时候，会立即执行该函数，只执行一次
                binding.name，
                binding.value
                ....
            },
            inserted(){
                // 表示元素插入到 dom 中的时候，会执行该函数，只会触发一次
            },
            update(){
                // 当 VNode 更新的时候，会执行该函数，可能会触发多次
            }
        })
            -> 

        -> 注意：在定义指令名称的时候，是不需要加上 v- 前缀的，在调用的时候需要

    -> 私有指令
        -> Vue实例下有一个对象：directives
            -> directives：{
                '指令名称'：{
                    bind：function(){}.
                    inserted(){}
                }
            }

    -> 指令函数简写形式
        -> 大多数情况下，我们可能在 bind 和 update 钩子上做重复动作，并且不想关心其他的钩子函数，可以这样写
            -> 全局的：
                -> Vue.directive('指令名称'，function(el, binding)) {
                    // el.style.backgroundColor = binding.value
                    // 里面执行操作即可
                }
            -> 私有的：
                -> '指令名称'：function(el, binding) {
                    // 执行需要的操作
                }



-> Vue实例的生命周期
    -> 什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为 生命周期
    -> 生命周期钩子，就是生命周期事件的别名而已
    -> 主要的生命周期函数分类：
        -> 创建期间的生命周期函数：
            -> beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性
            -> created：实例已经在内存中创建ok，此时 data 和 methods 已经创建ok，此时还 没有开始 编译模板
            -> beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中
            -> mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示
        -> 运行期间的生命周期函数：(这两事件会根据 data 数据的改变，有选择的触发 0次 或者 多次，只有数据发生修改才会触发这两个事件)
            -> beforeUpdate：状态更新之前执行此函数，此时 data 中的状态值是最新的，但是界面上显示的数据还是 旧的，因为此时还没有开始重新渲染 DOM 节点
            -> update：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，第已经完成了更新，界面已经被重新渲染好了
        -> 销毁期间的生命周期函数：
            -> beforeDestroy：实例销毁之前调用，在这一步，实例仍然完全可用。
            -> destroyed：Vue实例销毁后调用，调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁
    -> 生命周期函数 = 生命周期事件 = 生命周期钩子



-> Vue-resource 发起 get、post、jsonp请求
   -> vue-resource 是一个与vue高度集成的第三方包 
   -> vue-resource 依赖于vue，所以导入的时候需要在 vuejs 引入之后
   -> 在 vue实例中，使用 
        -> get请求方式：
            -> this.$http.get('url', [option]).then(result => {
                    // 通过 res.body 获取服务器返回的数据
                    res.body
                }).catch(err => {})
        -> post请求方式
            -> this.$http.post('url', {发送给服务器的数据}, [option]).then(result => {
                    // 通过 res.body 获取服务器返回的数据
                    res.body
                }).catch(err => {})
        -> jsonp请求方式
            -> this.$http.jsonp('url', [option]).then(result => {
                    // 通过 res.body 获取服务器返回的数据
                    res.body
                }).catch(err => {})

        -> option 参数
            -> emulateJSON：Boolean
                -> 为 true 时，以 application/x-www-form-urlencoded 格式发送数据

        -> 可以通过设置全局的option来设置 emulateJSON的值为 true，这样就不用我们请求的时候每次都写 emulateJSON了
            -> Vue.http.option.emulateJSON = true


        -> 设置请求的路径的根路径
           -> Vue.http.option.root = 'url地址' 
           -> 这个时候我们请求的时候就可以不用写根地址了
           -> 注意：在请求的时候，路径前面不能加  / ，加了 / 就不会使用上面设置的路径了
                -> Vue.http.option.root = '127.0.0.1:3000'
                -> this.$http.get('index')    
                    -> 等同于是 thsi.$http.get('./127.0.0.1:3000/index')


-> 请求地址
    -> get请求地址：http://vue.studyit.io/api/getlunbo
    -> POST请求地址：http://vue.studyit.io/api/post
    -> jsonp请求地址：http://vue.studyit.io/api/jsonp


-> JSONP的实现原理
    -> 由于浏览器的安全限制，不允许AJAX访问 协议不同、域名不同、端口号不同 的数据接口，浏览器认为这种访问不安全
    -> 可以通过动态创建 srcipt标签的形式，把script标签的src属性，指向数据端口的地址，因为script标签不存在跨域限制，这种数据获取方式，称为jsonp(注意：根据JSONP的实现原理，知晓JSONP只支持Get请求)
    -> 具体实现过程
        -> 先在客户端定义一个回调方法，预定义对数据的操作
        -> 再把这个回调方法的名称，通过URL传参的形式，提交到服务器的数据接口
        -> 服务器数据接口组织好要发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接处一个调用这个方法的字符串，发送给客户端去解析执行
        -> 客户端拿到服务器返回的字符串之后，当做script脚本去解析执行，这样就能拿到JSONP的数据了