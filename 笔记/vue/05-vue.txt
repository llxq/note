-> 在 Vue实例中，还有一个属性 watch
    -> 使用这个 属性，可以监视 data 中指定数据的变化，然后触发这个 watch 中对应的 function
        -> new Vue({
            watch: {
                需要监视的 data 中的数据：function(newValue, oldValue){}
                // 处理函数中的两个参数
                //      newValue：新的数据 (也就是改变之后的数据)
                //      oldValue：老的数据 (也就是改变之前的数据)
                firstName: function(){}
            }
        })

-> 通过 watch 监视路由的变化
   -> new Vue({
       watch: {
           // 监听 this.$route.path  的改变   该值可以获取路由的路径  /login
           '$route.path': () => {}
       }
   }) 


-> 在 Vue实例中，还有一个属性：computed
    -> 该属性可以定义一些 属性，这些属性，叫做 计算属性，计算属性的本质，就是 一个方法，只不过，我们在使用 这些计算属性的时候，是把它们的名称，直接当做 属性来使用的，并不会把 计算属性，当做方法来使用
        -> 不需要再 data 中定义属性了，直接在 computed 中使用 
            -> computed: {
                'fullName': function() {       // 不能使用 箭头函数！！！
                    return ...
                }
            }
        -> 注意：计算属性，在引用的时候，一定不要加 () 去调用，直接把它 当做 普通的属性去使用即可
        -> 注意：只要计算属性的回调函数中使用到了 data 中的数据，当 data 中的数据 值 发生改变的时候，都会触发这个回调函数
        -> 注意：计算属性的求值结果，会被缓存起来，方便下次直接使用，如果，计算属性方法中，所有来的任何数据，都没有发生过变化，则，不会重新对 计算属性求值
            -> 就是说，当值修改了之后，会被缓存保存下来，如果还有其他元素需要调用该值，并且未修改的话，是不会触发计算属性的回调函数的

    -> watch、computed 和 methods 之间的对比
        -> computed 属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算，主要当做属性来使用
        -> methods 方法表示一个具体的操作，主要书写业务逻辑
        -> watch 一个对象，键是需要观察的表达式，值是对应的回调函数，主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作，可以看做是 computed 和 methods 的结合体


-> nrm：只是单纯的提供了几个 常用的下载的 URL的地址，并能让我们灵活切换，但是我们下载的时候，使用的装包的工具都是 npm
    -> nrm ls 
        -> 可以查看所有的下载链接地址，还有当前使用的地址
    -> nrm use npm      // nrm use 下载地址   切换
        -> 使用 npm 下载
    -> nrm use taobao
        -> 使用 taobao镜像下载



-> Webpack
    -> 什么是 Webpack
        -> 是前端的一个 项目构建工具，它是基于 Node.js 开发出来的前端工具

    -> 使用 import 变量名 from '包的名字' 来导入第三方包，用法与 require 一致

    -> Webpack 能干嘛
        -> webpack 能够处理 js 文件的互相依赖关系
        -> webpack 能够处理 js 的兼容问题，把高级的浏览器不识别的语法，转换为 低级的浏览器能正常识别的语法

    -> 命令：
        -> webpack 要打包的文件路径 打包好的输出文件路径

    -> webpack 的基本配置文件的使用
        -> 配置 入口 和 出口 文件
        -> 在 根路径 新建一个 webpack.config.js 文件，在 该文件 中 定义 入口文件 和 出口 文件
            -> 这个配置文件，其实就是一个 js 文件，通过 Node 中的模块操作，向外暴露了一个 配置对象
            -> model.exports = {
                // entry：'路径'      入口，表示 要使用 webpack 打包那个文件
                entry：path.join(__dirname, './src/main.js'),

                // output：{path: 路径, filename: '输出的文件名' }   输出，表示 要输出到那个文件
                output：{
                    path: path.join(__dirname, './dist'),
                    filename: 'bundle.js'   
                }
            }
    -> 配置好了配置文件之后，我们可以直接在 控制台运行  webpack  就可以了
    -> 当我们使用了 webpack 这个命令之后，webpack做了这些步骤
       -> 首先，webpack 发现，我们并没有通过命令行的方式指定入口和出口
       -> webpack就会去项目的 根目录中，查找一个 'webpack.config.js' 文件
       -> 当找到配置文件之后，webpack 会去解析执行这个 配置文件，当解析执行完成之后，就得到了 配置文件中，导出的对象
       -> 当 webpack 拿到 配置对象后，就拿到了对象中的 入口 和 出口，然后进行打包构建


    -> webpack-dev-server
        -> 使用 webpack-dev-server 这个工具，来实现自动打包编译的功能
            -> 首先使用 npm 将这个工具安装到 项目的本地开发依赖
                -> npm i webpack-dev-server -D      // -D 代表安装到 本地项目依赖
            -> 安装完毕之后，这个工具的用法，和 webpack 命令的使用方法一样
            -> 由于，我们是在项目中，本地安装的 webpack-dev-server，所以，无法把他当做 脚本命令，在 powershell终端中直接运行；(只有那些安装到 全局 -g 的工具，才能在终端中正常运行)
            -> 注意：webpack-dev-server 这个工具，如果想要正常运行，要求 在本地项目中，必须安装 webpack，哪怕 全局安装了 webpack
            -> 在 packge.json 文件中，在 scripts 属性中添加 webpack-dev-server命令
                -> "dev": "webpack-dev-server"  // 就是通过 dev 来运行 webpack-dev-server
            -> 使用 npm run dev  就可以执行 webpack-dev-server命令了
                -> 项目运行在 localhost:8080
                -> webpack 的输出文件 被托管于 根路径  /
                    -> bundle.js的时候，应该使用根路径引用
                        -> <script src="/bundle.js"></script>
            -> webpack-dev-server 帮我们打包的 bundle.js 文件，并没有存放到 实际的 物理磁盘上，而是，直接托管到了 电脑的内存中，所以，我们在 项目根目录中，根本找不到 这个打包好的 bundle.js
            -> 我们可以认为，webpack-dev-server 把打包好的 文件，以一种虚拟的形式，托管到了 咱们项目的根目录中，虽然我们看不到它，但是，我们可以认为，它和 dist、src、node_modules 平级，有一个看不见的文件，叫做 bundle.js
        
        -> webpack-dev-server的常用命令和参数
            -> 在 package.json 文件中，在我们设置的 dev 第地方，添加命令即可
                -> "dev":"webpack-dev-server --open"
                    -> --open：自动打开浏览器
                -> "dev":"webpack-dev-server --open --port 3000"
                    -> --port 3000：打开的浏览器端口号为 3000
                -> "dev":"webpack-dev-server --open --port 3000 --contentBase src"
                    -> --contentBase 路径：设置打开的内容的根路径
                 -> "dev":"webpack-dev-server --open --port 3000 --contentBase src hot"
                    -> hot：不会每次保存都重新生成一个 bundle.js文件，而是把修改的内容以补丁的形式去修改前面生成的 bundle.js文件，并且可以在修改样式的时候，页面异步刷新
            -> 顺序可以被修改
                -> "dev":"webpack-dev-server --open --port 3000 --contentBase src/index.html --hot"

        -> webpack-dev-server配置参数的另一种方式
            -> 首先还是需要在 package.json文件中  
                -> "dev":"webpack-dev-server"
            -> 然后在配置文件中 (webpack.config.js)
                -> 除了配置了 出口文件 和 入口文件 之外，还可以配置 webpack-dev-server 的参数
                -> 添加一个属性，与 entry、output 平级， 
                    -> devServer: {
                        // 这个是配置 webpack-dev-server的第二种方式
                        open：true,     // 自动打开浏览器
                        port: 3000,     // 配置端口
                        contentBase：'src',   // 指定的托管根目录
                        hot：true       // 启用 热更新 的第一步
                        // 第二步，加载 webpack 模块
                        // const webpack = require('webpack')
                    },
                    // 这个是第三步，该属性与 devServer平级
                    plugins: [      // 配置插件的节点
                        new webpack.HotModuleReplacementPlugin()
                        // new 了一个更新的模块对象 
                    ]

    -> 由于使用 --contentBase 指令的过程比较繁琐，需要指定启动的目录，同时还需要修改 index.html 中的 script 标签的 src 属性，所以我们可以使用 html-webpack-plugin 插件，配置启动页面，将我们的 html 页面托管
    -> 使用方式：
        -> 安装：npm i html-webpack-plugin -D
        -> 在 webpack.config.js文件中
            -> 导入 该插件
                -> const htmlWebpackPlugin = require('html-webpack-plugin')
                -> 注意：只要是插件，都需要放置在 plugins节点下 
                    -> plugins: [
                        // 创建一个 在内存中 生成 HTML 页面的插件
                        // 根据指定的模板页面，生成一个 内存页面
                        new htmlWebpackPlugin({
                            // 指定模板页面，将来会根据指定的页面路径，去生成内存中的页面
                            template: path.join(__dirname, './src/index.html'),

                            // 指定的生成的页面的名称
                            // 该页面的内容与 模板页面的内容是一样的，是复制过来的
                            filename: 'index.html'
                        })
                    ]
        -> 内存中生成的页面，会自动生成一个 script 标签，并且引用 内存中的 bundle.js，所以这个时候，我们不需要手动处理 bundle.js的引用路径了，html-webpack-plugin 插件，已经帮我们自动引用了 内存中的 bundle.js


    -> webpack 出来 css样式表的 第三方包
        -> 首先在 main.js 中 引入 css文件 
            -> import '路径'
            -> 但是这样会报错 没有合适的加载器(loader)来处理这个文件类型
            -> 因为：webpack默认只能打包处理 js 类型文件，无法处理，其他的非 js 类型的文件
            -> 如果要处理 非js 类型的文件，我们需要手动安装一些 合适 第三方 loader(加载器)
        -> 如果想要打包处理 css 文件，需要安装 style-loader 和 css-loader
            -> 使用npm安装：npm i style-loader css-loader -D
        -> 然后打开 webpa.config.js 这个配置文件，在里面新增一个配置节点：module，它是一个对象，在这个对象上有一个 rules 属性，这个 rules 属性的值，是一个数组，这个数组存放了所有第三方文件的 匹配处理规则
            -> module: {      // 这个节点，用于配置 所有 第三方模块 加载器
                rules: [      // 所有的第三方模块的 匹配规则
                    {
                        // test：/正则匹配/
                        test：/\.css$/,

                        // 匹配指定的 loader去处理当前匹配到的文件
                        // 配置处理 .css 文件的第三方 loader 规则
                        use: ['style-loader', 'css-loader']
                    }
                ]
            }
    -> webpack调用第三方 loader 的过程
        -> 发现这个 要处理的文件不是 js 文件，然后就去 配置文件中，查找有没有对应的第三方 loader规则
        -> 如果能找到对应的规则，就会调用对应的 loader 处理，这种规则
        -> 在调用 loader 规则的时候，是从 右到 左，当最后一个loader 调用完毕之后，会把 处理的结果交给 webpack 进行打包 合并，最终输出到 bundle.js文件中去


    -> loader处理 less文件的 loader
        -> 安装 loader
            -> npm i less-loader less -D
        -> 配置规则
            -> {
                test: /\.less$/, 
                use: ['style-loader', 'css-loader', 'less-loader']
            }

    -> loader 处理 scss 文件
        -> 安装：cnpm i sass-loader -D
        -> 安装：cnpm i node-sass -D
