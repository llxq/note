-> vue.js
	-> vue.js是一套构建用户界面的框架，只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合，(vue有配套的第三方库，可以整合起来做大项目的开发，vue语法也是可以用于进行手机APP开发的，需要借助于 weex)
	
	-> 在 vue 中，一个核心的概念，就是让用户不在操作DOM元素，解放了用户的双手，让我们可以有更多的时间去关心业务逻辑
	
	-> 框架：是一套完整的技术解决方案，对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目

	-> 库(插件)：提供某一个小功能，对项目的入侵性较小，如果某个库无法完成某些需求，可以很容易切换到其他库来实现需求

	-> 基本语法
		-> 引入vue.js  
		-> 定义一个区域
			-> 区域中使用 vue 定义的数据  {{ msg }}
		-> 写 vue 脚本
			-> var vn = new Vue({
				el: '这里填写需要操纵的 HTML 元素区域',
				data: {	 // 这个 data 就是控制 el 需要使用到的数据
					msg：'这里就是填写需要发送的数据'   // 名称随意
				},
				methods: {
					 // 这个 methods 中定义了当前 Vue 中所需要的所有方法
				}
			})

	-> vue对象中，会自动监听当前 data 数据发生的变化，并且自动修改，并且同步到页面上
  -> 可以让我们不需要关心页面数据的变化，减少了对 dom 的操作
	-> 在当前对象中，需要使用 this 调用当前中的数据
	-> 修改 当前 this.属性 的值可以修改当前对象中对应属性的值

	-> 指令
		-> v-cloak
			-> 使用 v-cloak 能够解决 差值表达式闪烁问题
      -> 插件表达式可以在前后放置任意元素和字符，只会替换当前占位符，不会把整个元素替换
      -> 不能将HTML字符串解析为HTML
		
		-> v-text
			-> 效果与 差值表达式 一样，也能将数据渲染给指定元素
			-> 默认 V-text 是没有闪烁问题的
			-> 插值表达式会把指令引用的数据完全的替换 标签原有的数据
			-> 不能将 HTML字符串 解析为 HTML

		-> v-html
			-> 可以将 HTML字符串 解析为 HTML
			-> 也会覆盖当前元素中的内容

		-> v-bind
			-> v-bind:属性
			-> v-bind: 是Vue中提供的用于绑定属性的指令
			-> 在 v-bind 中可以把 "" 里面的内容当做为一个变量，可以使用 + 为变量添加字符
			-> 注意：v-bind: 可以简写为 :要绑定的属性
			-> v-bind：中，可以写一些合法的js表达式

		-> v-on
			-> vue 中提供了 v-on事件绑定机制
			-> von：事件名="methods中定义的方法名"
			-> v-on的缩写：@
			